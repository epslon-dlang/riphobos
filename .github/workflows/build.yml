name: dlang

on:
  pull_request:
    branches:
      - main
    paths:
      - 'source/**'
      - 'dub.json'
      - 'dub.selections.json'
      # This file
      - '.github/workflows/build.yml'
      # pre-build script
      - '.github/workflows/pre-build.sh'
  push:
    branches:
      - main
  workflow_dispatch:

jobs:

  dscanner:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install D compiler
        uses: dlang-community/setup-dlang@v1
        with:
          compiler: dmd-master

      - name: Cache dub dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.dub/
            ./.dub/
          key: linux-dub-${{ hashFiles('dub.selections.json') }}
          restore-keys: |
            linux-dub-

      - name: Check dscanner
        run: |
          dub run dscanner -- --syntaxCheck source/
          # FIXME: Enable linting when all files are conformant
          # dub run dscanner -- --styleCheck source/

  dfmt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install D compiler
        uses: dlang-community/setup-dlang@v1
        with:
          compiler: dmd-master

      - name: Cache dub dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.dub/
            ./.dub/
          key: linux-dub-${{ hashFiles('dub.selections.json') }}
          restore-keys: |
            linux-dub-

      # FIXME: Make all files conformant with D style
      - name: Check dfmt
        run: |
          dub run dfmt -- -c . source/
      #     for file in `git diff --name-only | grep ".d$"`; do
      #       echo "File '$file' need to be formatted."
      #       DFMT_FILE_FOUND=1
      #     done
      #     if [ "$DFMT_FILE_FOUND" == "1" ]; then
      #       exit 1;
      #     fi

  docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install D compiler
        uses: dlang-community/setup-dlang@v1
        with:
          compiler: dmd-master

      - name: Cache dub dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.dub/
            ./.dub/
          key: linux-dub-${{ hashFiles('dub.selections.json') }}
          restore-keys: |
            linux-dub-

      - name: Build documentation
        run: |
          dub run adrdox@2.5.0 -- -j1 source
          dub build --build=ddox
          dub build --build=docs

  build:
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest, macOS-latest ]
        dc: [ dmd-master, dmd-latest ] # dmd-latest, ldc-latest, ldc-master
        arch: [x86_64] # x86

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - name: Install D compiler
        uses: dlang-community/setup-dlang@v1
        with:
          compiler: ${{ matrix.dc }}

      - name: '[POSIX] Cache dub dependencies'
        if: runner.os != 'Windows'
        uses: actions/cache@v2
        with:
          path: |
            ~/.dub
            ./.dub
          key: ${{ runner.os }}-${{ matrix.dc }}-${{ matrix.arch }}-dub-${{ hashFiles('dub.selections.json') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.dc }}-${{ matrix.arch }}-dub-

      - name: '[Windows] Cache dub dependencies'
        if: runner.os == 'Windows'
        uses: actions/cache@v2
        with:
          path: |
            ~\AppData\Local\dub
            .\.dub
          key: ${{ runner.os }}-${{ matrix.dc }}-${{ matrix.arch }}-dub-${{ hashFiles('dub.selections.json') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.dc }}-${{ matrix.arch }}-dub-

      - name: Check for syntax before build
        run: dub build --arch=${{ matrix.arch }} --build=syntax

      - name: '[POSIX] Run pre build script'
        if: runner.os != 'Windows'
        run: .github/workflows/pre-build.sh

      - name: Build static library
        run: |
          dub build --build=debug --config=static --arch=${{ matrix.arch }} --parallel --build-mode=singleFile --force -v
          dub build --build=release --config=static --arch=${{ matrix.arch }} --parallel --build-mode=singleFile --force -v
          dub build --build=release-debug --config=static --arch=${{ matrix.arch }} --parallel --build-mode=singleFile --force -v
          dub build --build=release-inline --config=static --arch=${{ matrix.arch }} --parallel --build-mode=singleFile --force -v

      # Don't build dynamic libraries using DMD for Windows
      - name: Build dynamic library
        if: runner.os != 'Windows' || (runner.os == 'Windows' && !(startsWith(matrix.dc, 'dmd-')))
        run: |
          dub build --build=debug --config=shared --arch=${{ matrix.arch }} --parallel --build-mode=singleFile --force -v
          dub build --build=release --config=shared --arch=${{ matrix.arch }} --parallel --build-mode=singleFile --force -v
          dub build --build=release-debug --config=shared --arch=${{ matrix.arch }} --parallel --build-mode=singleFile --force -v
          dub build --build=release-inline --config=shared --arch=${{ matrix.arch }} --parallel --build-mode=singleFile --force -v

      # FIXME: Don't test release-inline build type for DMD compiler or release
      # build type for DMD on Windows platform as it leads to unknown frame
      # pointers and illegal instructions as part of some unknown stack issues,
      # respectively.
      - name: Run mono-threaded test suite (debug and release-debug build type)
        run: |
          dub test --build=debug --config=unittest-cov --arch=${{ matrix.arch }} --parallel --build-mode=singleFile --force -v -- --DRT-covopt="merge:1"
          dub test --build=release-debug --config=unittest-cov --arch=${{ matrix.arch }} --parallel --build-mode=singleFile --force -v -- --DRT-covopt="merge:1"

      - name: Run mono-threaded test suite (release build type)
        if: true == !(startsWith(matrix.dc, 'dmd-') && runner.os == 'Windows')
        run: dub test --build=release --config=unittest-cov --arch=${{ matrix.arch }} --parallel --build-mode=singleFile --force -v -- --DRT-covopt="merge:1"

      - name: Run mono-threaded test suite (release-inline build type)
        if: true == !(startsWith(matrix.dc, 'dmd-'))
        run: dub test --build=release-inline --config=unittest-cov --arch=${{ matrix.arch }} --parallel --build-mode=singleFile --force -v -- --DRT-covopt="merge:1"

      # FIXME: DUB currently only works with a custom test runner by compiling
      # the source code on a single compiler invocation. This is obviously not
      # ideal and Github Workflows shared machines struggle on compiling it due
      # to limited amount of memory.

      # - name: Run multi-threaded test suite
      #   if: true == !(startsWith(matrix.dc, 'dmd-') && (endsWith(matrix.build_type, 'inline') || matrix.build_type == 'release'))
      #   run: dub test --build=${{ matrix.build_type }} --config=unittest-cov-threaded --arch=${{ matrix.arch }} --parallel --force -v -- --DRT-covopt="merge:1"

      - name: Upload code coverage to codecov
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: unittests
          verbose: true
